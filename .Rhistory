X <- solve(B1)%*%b1
B1 <- matrix(c(1,-1,2,-1), ncol=2, byrow=T)
b1 <- c(2,3)
X <- solve(B1)%*%b1
X
B1 <- matrix(c(1,-1,-1,2), ncol=2, byrow=T)
b1 <- c(2,3)
X <- solve(B1)%*%b1
X
View(X)
View(B)
rm(list=ls())
rm(list=ls())
x1 <- c(2,4,5,8,1,12,23,34)
class(x1)
mat1 <- matrix(data =1:9, nrow=3, ncol=3)
mat2 <- matrix(data=1:9, ncol=3)
mat1
mat2
mat3 <- matrix(data=1:9, nrow=3)
mat3
mat3 <- matrix(data=1:15, nrow=5, byrow= TRUE,
dimnames=list(c("r1", "r2","r3","r4","r5"), c("c1","c2","c3")))
mat3
class(mat3)
dim(mat3)
Dimensiones <- dim(mat3)
Dimensiones
Dimensiones[1]
Dimensiones[2]
colnames(mat3)
rownames(mat3)
help("sample")
mat4 <- matrix(data=sample(1:129,9), ncol=3)
mat4
mat4[2,2] #
mat4[,3]
mat4[3,]
mat4[2,2] <- pi
mat4
-1:1/0 #NaN es no a number
x <- NA
x
rm(list=ls())
x <- runif(1, 0, 10)
x
help("runif")
r <- runif(10,0,10)
r
x <- runif(1, 0, 10)
if(x>5){
y <- TRUE
}else{
y <- FALSE
}
x
x <- runif(1, 0, 10)
if(x<5){
y <- TRUE
}else{
y <- FALSE
}
x
help("print")
for(i in 1:5){
print(i)
}
i
i
sessionInfo()
m1 <- matrix(1:12, ncol=3, byrow=T, dimnames=list(c("r1","r2","r3","r4"), c("c1","c2","c3")))
m1
m1 <- matrix(1:12, ncol=3, byrow=T, dimnames=list(c("r1","r2","r3","r4"),
c("c1","c2","c3")))
m1[1,1]
m1[,c(2,3)]
m1[,c(2,3)] #Selecionar las columnas 2 y 3
class(m1[,c(2,3)])
class(m1)
m1[,c(-1,-3),drop=F]
m1[,c(-1,-3)]
m1[,c(-1,-3),drop=F]
sel <- matrix(rep(x(T,F),6),4,3)
sel <- matrix(rep(c(T,F),6),4,3)
sel
r <- c(1:7)
r
rep(r, 4) #
rep(1:7, 4)
rep(c("Hola", "a", "todos"), times=5) #
rep(c("Hola", "a", "todos"), each=3)
rep(c("Hola", "a", "todos"), times=c(3,2,5))
sel
sel <- matrix(rep(c(T,F),3),4,3)
sel
sel <- matrix(rep(c(T,F),2),4,3)
sel
sel <- matrix(rep(c(T,F),6),4,2)
sel
sel <- matrix(rep(c(T,F),6),4,4)
sel
sel <- matrix(rep(c(T,F),2),4,4)
sel
sel <- matrix(rep(c(T,F),3),4,3)
sel
m1[sel]
View(m1)
sel <- matrix(rep(c(F,T),3),4,3)
m1[sel]
sel <- matrix(rep(c(T,F),3),4,3)
m1[sel]
sel
ncol(m1)
nrow(m1)
t(m1)
m1
diag(m1)
help(col())
help("col")
col(m1)
m1
col(sel)
m1[,2]
m1[,2, drop=F]
cbind(1,m1)
cbind(1:2,m1)
cbind(rep(1:3),m1)
cbind(rep(1:2,2),m1)
cbind(1:3,1:6)
cbind(1:3,1:6,1:12)
apply(m1,1,sum)
m1
apply(m1,2,sum)
apply(m1,2,sum, drop=F)
apply(m1,1,sum, drop=F)
m1
apply(m1,1,sum,)
m1
apply(m1,1,sum)
apply(m2,2,sum)
apply(m1,2,sum)
apply(m1,2,mean) #
x <- runif(1,0,10) if (x>5) {
y <- T
}
x <- runif(1,0,10) if (x>5) {
y <- T}
x <- runif(1,0,10) if (x>5) {
y <- T
}
x <- runif(1,0,10) if (x>5) {
y <- T
} else {
y <- F
}
x <- runif(1,0,10)
if (x>5) {
y <- TRUE
}else{
y <- FALSE
}
x <- runif(1,0,10) if (x>5) {
y <- TRUE
} else {
y <- FALSE
}
x <- runif(1,0,10)
if (x>5) {
y <- TRUE
} else {
y <- FALSE
}
x
y
y
x <- runif(1,0,10)
if (x>5) {
y <- TRUE
} else {
y <- FALSE
}
x
y
q = runif(10,0,20)
q
help(runif)
q <- runif(10,0,20) #10 es el
q
VectorBoolaono <- (q>=14)
VectorBoolaono
class(VectorBoolaono)
q <- runif(10,0,20) #
VectorBoolaono <- (q>=14) #
VectorBoolaono
NumAprobados1 <- sum(VectorBoolaono)
NumAprobados1
NumAprobados2 <- length(VectorBoolaono[VectorBoolaono==T])
NumAprobados2
NumAprobados2 <- length(VectorBoolaono[VectorBoolaono=T])
NumAprobados2
NumAprobados2 <- length(VectorBoolaono[VectorBoolaono==T])
NumAprobados2
which(VectorBoolaono)
if (NumAprobados1>0){
q[which(VectorBoolaono)]
}
VectorBoolaono
NumAprobados1
q
help("which")
help("system.time")
system.time(sum(VectorBoolaono))
VectorBoolaono
system.time(length(VectorBoolaono[VectorBoolaono==T]))
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("Verdad" %in% x){
print("Verdad se encontró en IF")
} else if("VERDAD" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
x <- c("¿Qué","es","VERDAD?")
if("VERDAD?" %in% x){
print("verdad se encontró en IF")
} else if("VERDAD?" %in% x){
print("VERDAD se encontró en IF_ELSE")
} else{
print("No se econtró la VERDAD")
}
library()
install.packages("gclus")
library(gclus)
help(package = gclucs)
help(package = "gclucs")
help(package = "gclucs")
library(gclus) #Esto es para empezar a utilizarlo
help(package = "gclucs")
help(package = "gclus")
es.par <- function(numero){
residuo <- numero %% 2
if (residuo==0)
return(TRUE)
return(FALSE)
}
es.par(25)
es.par(12482)
es.impar <- function(número){
residuo <- número %% 2
if (residuo!=0)
return(TRUE)
return(FALSE)
}
es.impar(15)
es.impar(20)
es.divisible.por <- function(entero.grande,entero.pequeño){
if(entero.grande %% entero.pequeño !=0)
return(FALSE)
return(TRUE)
}
es.divisible.por(40,10)
es.divisible.por(53,25)
es.par <- function(num){
es.divisible.por(num,2)
}
es.par(47)
getwd()
setwd("C:/Users/Usuario/Desktop/Clases_de_R/Prácticas0/Clase_2")
setwd(dir = "c:/Users/Usuario/Desktop/Clases_de_R/Prácticas/Clase_2/")
setwd("c:/Users/Usuario/Desktop/Clases_de_R/Prácticas0/Clase_2")
getwd()
setwd("c:/Users/Usuario/Desktop/Clases_de_R/Prácticas0/Clase_2/")
setwd(dir = "c:/Users/Usuario/Desktop/Clases_de_R/Prácticas/Clase_2/")
setwd("c:/Users/Usuario/Desktop/Clases_de_R/Prácticas/Clase_2/")
setwd("c:/Users/Usuario/Desktop/Clases_de_R/Prácticas/Clase_2/")
dir()
library(datasets)
library(help="datasets")
data("cars")
head(cars)
library(car)
library(car)
library(help="car")
data("Prestige")
help(cars)
head(Prestige)
str(Prestige)
summary(Prestige)
View(Prestige)
str(Prestige)
cor(Prestige[,-6]) #Le qui
library(corrplot)
corrplot(cor(Prestige[,-6]),method = "number")
library(help="corrplot")
data1 <- read.table("http://courses.washington.edu/b517/Datasets/string.txt", header=T)
data1
data2 <- read.csv("https://catalogue.data.gov.bc.ca/dataset/1b32412c-a58c-420c-a9fe-5bee1641252d/resource/184e968e-a208-4639-bd43-9be19e4b051b/download/data_literacy_program_needs_assessment_survey_2019.csv",
header = T)
View(data2)
install.packages("readxl") #Instalamos el paquete
install.packages("readxl")
library(readxl)
help("read_excel")
help("read_excel")
help("excel_sheets")
excel_sheets("excel_prueba")
setwd("c:/Users/Usuario/Desktop/Clases_de_R/Prácticas/Clase_2/")
dir()
excel_sheets("excel_prueba.xlsx")
excel_iris <- read_excel("excel_prueba.xlsx", sheet = "iris")
excel_iris <- read_excel("excel_prueba.xlsx", sheet = "iris")
excel_iris
View(excel_iris)
excel_women <- read_excel("excel_prueba-xlsx", sheet="women", col_names = F)
excel_women <- read_excel("excel_prueba-xlsx", sheet="women", col_names = F)
excel_sheets("excel_prueba.xlsx")
dir()
excel_women <- read_excel("excel_prueba.xlsx", sheet="women", col_names = F)
excel_women
help("read_excel")
excel_sheets("excel_prueba.xlsx") #
dir()
excel_air <- read_excel("excel_prueba.xlsx", sheet = "airquality", skip = 3)
View(excel_air)
View(airquality)
View(excel_air)
View(excel_air)
excel_airquality <- read_excel("excel_prueba.xlsx", sheet="airquality",skip = 3,na="-",
col_types = c("skip","numeric","numeric","numeric","numeric",
"skip","date","numeric","numeric","numeric",
"skip"))
excel_airquality
colnames(excel_airquality)<-c("ozono","rad_solar","viento","temp","fecha",
"mes","día","año")
excel_airquality
install.packages(c("haven", "mnormt"))
install.packages("dplyr")
library(dplyr) #C
?select
rm(list=ls())
excel_sheets("excel_prueba.xlsx") #Sirve para visualizar las pestañas de un mismo archivo excel.
# En este caso hay tres pestañas en excel_prueba.xlsx
colnames(excel_airquality)<-c("ozono","rad_solar","viento","temp","fecha",
"mes","día","año")
excel_sheets("excel_prueba.xlsx") #Sirve para visualizar las pestañas de un mismo archivo excel.
# En este caso hay tres pestañas en excel_prueba.xlsx
xcel_airquality <- read_excel("excel_prueba.xlsx", sheet="airquality",skip = 3,na="-",
col_types = c("skip","numeric","numeric","numeric","numeric",
"skip","date","numeric","numeric","numeric",
"skip"))
colnames(excel_airquality)<-c("ozono","rad_solar","viento","temp","fecha",
"mes","día","año")
colnames(excel_airquality)<-c("ozono","rad_solar","viento","temp","fecha",
"mes","día","año")
# Le damos nombres
excel_airquality <- read_excel("excel_prueba.xlsx", sheet="airquality",skip = 3,na="-",
col_types = c("skip","numeric","numeric","numeric","numeric",
"skip","date","numeric","numeric","numeric",
"skip"))
colnames(excel_airquality)<-c("ozono","rad_solar","viento","temp","fecha",
"mes","día","año")
library(ggplot2)
excel_iris <- read_excel("excel_prueba.xlsx", sheet = "iris") #Importamos la pestaña iris
excel_women <- read_excel("excel_prueba.xlsx", sheet="women", col_names = F)
p <- ggplot(iris)
iris
p
p <- p+aes(x=Petal.Length, y=Petal.Width, colour=Species)
p
summary(p)
p <- p + geom_point()
p
ggsave("gráfico.png")
View(excel_iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species))+geom_point()+geom_smooth()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species))+geom_point()+geom_smooth()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species))+geom_point()+
geom_smooth() + facet_grid(~Species)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+geom_point()+
geom_smooth() + facet_grid(~Species)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species)) +
geom_point() + geom_smooth() + ggtitle("Ancho y largo del Pétalo") +
labs(x="Largo del Pétalo", y="Ancho del Pétalo", colour="Especies")
theme_grey()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species)) +
geom_point() + geom_smooth() + ggtitle("Ancho y largo del Pétalo") +
labs(x="Largo del Pétalo", y="Ancho del Pétalo", colour="Especies") +
theme_bw()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species)) +
geom_point() + geom_smooth() + ggtitle("Ancho y largo del Pétalo") +
labs(x="Largo del Pétalo", y="Ancho del Pétalo", colour="Especies")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species)) +
geom_point() + geom_smooth() + ggtitle("Ancho y largo del Pétalo") +
labs(x="Largo del Pétalo", y="Ancho del Pétalo", colour="Especies") +
theme_classic()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width,colour=Species)) +
geom_point() + geom_smooth() + ggtitle("Ancho y largo del Pétalo") +
labs(x="Largo del Pétalo", y="Ancho del Pétalo", colour="Especies") +
theme_bw() + theme(panel.background = element_rect(fill="lightblue"),
panel.grid.minor = element_line(linetype = "dotted"))
